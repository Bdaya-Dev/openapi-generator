class {{classname}} {

  final {{classname}}Raw _rawApi;
  final SerializationRepositoryBase _repository;

  const {{classname}}(this._rawApi, this._repository);

  {{#operation}}
  /// {{summary}}{{^summary}}{{nickname}}{{/summary}}
  /// {{notes}}
  ///
  /// Parameters:
  {{#allParams}}
  /// * [{{paramName}}] {{#description}}- {{{.}}}{{/description}}
  {{/allParams}}
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future]{{#returnType}} containing a [Response] with a [{{{.}}}] as data{{/returnType}}
  /// Throws [DioError] if API call or serialization fails
  {{#externalDocs}}
  /// {{description}}
  /// Also see [{{summary}} Documentation]({{url}})
  {{/externalDocs}}
  {{#isDeprecated}}
  @Deprecated('This operation has been deprecated')
  {{/isDeprecated}}
  Future<Response<{{{returnType}}}{{^returnType}}void{{/returnType}}>> {{nickname}}({ {{#allParams}}{{#isPathParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}required {{{dataType}}} {{paramName}},{{/isPathParam}}{{#isQueryParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}{{^defaultValue}}required {{/defaultValue}}{{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}}{{^isContainer}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isContainer}},{{/isQueryParam}}{{#isHeaderParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}{{^defaultValue}}required {{/defaultValue}}{{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}}{{^isContainer}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/isContainer}},{{/isHeaderParam}}{{#isBodyParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}required {{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}},{{/isBodyParam}}{{#isFormParam}}
    {{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{#required}}{{^isNullable}}required {{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}} {{paramName}},{{/isFormParam}}{{/allParams}}
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {    
    {{#hasBodyOrFormParams}}

    Object? _bodyData;
    {{#hasFormParams}}
    {{#isMultipart}}
    _bodyData = FormData.fromMap(<String, dynamic>{
      {{#formParams}}
      {{^required}}{{^isNullable}}if ({{{paramName}}} != null) {{/isNullable}}{{/required}}r'{{{baseName}}}': {{#isFile}}{{{paramName}}}{{#isArray}}.toList(){{/isArray}}{{/isFile}}{{^isFile}}_repository.encodeFormParameter({{{paramName}}}, {{>types/recursion_base_type_info}}){{/isFile}},
      {{/formParams}}
    });
    {{/isMultipart}}
    {{^isMultipart}}
    _bodyData = <String, dynamic>{
      {{#formParams}}
      {{^required}}{{^isNullable}}if ({{{paramName}}} != null) {{/isNullable}}{{/required}}r'{{{baseName}}}': _repository.encodeFormParameter({{{paramName}}}, {{>types/recursion_base_type_info}}),
      {{/formParams}}
    };
    {{/isMultipart}}
    {{/hasFormParams}}
    {{#bodyParam}}
    {{#isPrimitiveType}}
    _bodyData = {{paramName}}{{#isFile}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^required}}?{{/required}}.finalize(){{/isFile}};
    {{/isPrimitiveType}}
    {{^isPrimitiveType}}      
    _bodyData = {{^required}}{{paramName}} == null ? null : {{/required}}_repository.serialize({{paramName}}, {{>types/recursion_base_type_info}});
    {{/isPrimitiveType}}
    {{/bodyParam}}
    {{/hasBodyOrFormParams}}

    final _response = await _rawApi.{{nickname}}(
      {{#allParams}}{{#isPathParam}}
      {{paramName}}: _repository.encodeStringParameter({{paramName}}, {{>types/recursion_base_type_info}}),{{/isPathParam}}{{#isQueryParam}}
      {{paramName}}: {{^required}}{{^isNullable}}{{{paramName}}} == null ? null : {{/isNullable}}{{/required}}_repository.encodeQueryParameter({{paramName}}, {{>types/recursion_base_type_info}}{{#collectionFormat}}, context: ListFormat.{{collectionFormat}}{{/collectionFormat}}) ,{{/isQueryParam}}{{#isHeaderParam}}
      {{paramName}}: {{^required}}{{^isNullable}}{{{paramName}}} == null ? null : {{/isNullable}}{{/required}}_repository.encodeStringParameter({{paramName}}, {{>types/recursion_base_type_info}}) ,{{/isHeaderParam}}{{/allParams}}
      {{#hasConsumes}}
      body: _bodyData,
      requestContentType: '{{#prioritizedContentTypes}}{{#-first}}{{{mediaType}}}{{/-first}}{{/prioritizedContentTypes}}',{{/hasConsumes}}
      cancelToken: cancelToken,
      headers: headers,
      extra: extra,
      validateStatus: validateStatus,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );    
    {{#returnType}}

    {{{.}}}? _responseData;

    try {
      final rawResponse = _response.data;
      {{#isResponseFile}}
      _responseData = rawResponse == null ? null : rawResponse as {{{returnType}}};
      {{/isResponseFile}}
      {{^isResponseFile}}
      {{#returnProperty}}
       _responseData = rawResponse == null ? null : _repository.deserialize(
        rawResponse,
        {{>types/recursion_base_type_info}},
      );     
      {{/returnProperty}}
      {{/isResponseFile}}
    } catch (error, stackTrace) {
      throw DioError(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioErrorType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<{{{.}}}>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );{{/returnType}}{{^returnType}}
    return _response;{{/returnType}}
  }

  {{/operation}}
}
