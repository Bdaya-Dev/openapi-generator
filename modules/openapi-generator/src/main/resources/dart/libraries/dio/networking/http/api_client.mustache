{{>header}}
import 'package:http/http.dart' as http;{{#useBuiltValue}}
import 'package:built_value/serializer.dart';
import 'package:{{pubName}}/{{sourceFolder}}/serializers.dart';{{/useBuiltValue}}
import 'package:{{pubName}}/{{sourceFolder}}/auth/_exports.dart';
{{#apiInfo}}{{#apis}}import 'package:{{pubName}}/{{sourceFolder}}/{{apiPackage}}/{{classFilename}}.dart';
{{/apis}}{{/apiInfo}}
class {{clientName}} {
  static const String basePath = r'{{{basePath}}}';

  final http.Client client;
  final String actualBasePath;
{{#useBuiltValue}}
  final Serializers serializers;

{{/useBuiltValue}}
  {{clientName}}({
    http.Client? client,{{#useBuiltValue}}
    Serializers? serializers,{{/useBuiltValue}}
    String? basePathOverride,
  })  : {{#useBuiltValue}}this.serializers = serializers ?? standardSerializers,{{/useBuiltValue}}
        this.client = client ?? http.Client(),
        this.actualBasePath = basePathOverride ?? basePath;
  {{#apiInfo}}{{#apis}}

  /// Get {{classname}} instance, base route and serializer can be overridden by a given but be careful,
  /// by doing that all interceptors will not be executed
  {{classname}} get{{classname}}() {
    return {{classname}}({{#includeSubTemplate}}api_constructor_call{{/includeSubTemplate}});
  }{{/apis}}{{/apiInfo}}
}
